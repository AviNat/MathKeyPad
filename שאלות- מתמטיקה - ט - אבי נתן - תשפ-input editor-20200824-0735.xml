<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 1613827  -->
  <question type="formulas">
    <name>
      <text>input editor</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>{#1}<br>{#2}</p>

<p>פשטו את הביטויים</p>
<div dir="ltr">
    <span dir="ltr">\( \frac {\sqrt{2}+1}{\sqrt{2}-1} = \)</span>
    <span id="mf1{mb}" style="display: inline-block; padding: 2px 3px; border: 1px solid #808080; min-width: 8ch;">...
</span>
    <br>
  <span dir="ltr">\( \frac {x^3}{x^2\cdot y} =\)</span>
    <span id="mf2{mb}" style="display: inline-block; padding: 2px 3px; border: 1px solid #808080; min-width: 8ch;">...
</span>
</div>

<script type="module">

// AviLib.mjs

import MathLive from 'https://unpkg.com/mathlive/dist/mathlive.mjs';

class formulasPart {
    constructor(partName, partType) {
        this.name = partName;
        this.type = partType;
		this.fields = [...document.getElementById(this.name).getElementsByClassName("formulas_" + this.type)];
    }
    getValue(id = 0) {
        return this.fields[id].value;
    }
    setValue(id, val) {
        this.fields[id].value = val;
    }
    storeExp(id, str) {
        this.fields[id].value = str.length > 0 ? [...str].map(c => c.charCodeAt(0)).join('+') : '';
    }
    getExp(id = 0) {
        const str = this.fields[id].value;
        return str.length > 0 ? str.split('+').map(x => String.fromCharCode(Number(x))).join('') : "";
    }
	setStyleObj(id, style) {
		const s = this.fields[id].style;
		for (const k in style) s[k] = style[k];
	}
    setStyle(id, key, value) {
        this.fields[id].style[key] = value;
    }
    hide(id) {
        this.fields[id].style.display = "none";
    }
    hideAll() {
        document.getElementById(this.name).style.display = "none";
    }
    listener(event, func, id = 0) {
        this.fields[id].addEventListener(event, func);
    }
}

class MathInputField {
    constructor(elementName, exprText, part, keyboardRows = undefined) {
        this.name = elementName;
        document.getElementById(elementName).textContent = exprText;
        this.mf = MathLive.makeMathField(elementName, {
            /* OPTIONS */
            smartMode: false,
            defaultMode: 'math',
            letterShapeStyle: 'tex',
            virtualKeyboardMode: 'onfocus',
            keypressVibration: false,
            /* CUSTOM KEYBOARD */
			virtualKeyboards: 'avi-keyboard',
            customVirtualKeyboards: {
                'avi-keyboard': {
                    label: '',
                    tooltip: '',
                    layer: 'avi-layer'
                }
            },
            customVirtualKeyboardLayers: {'avi-layer': {rows: []}},
            /* HOOKS*/
            onModeChange: (mf, mode) => mode === 'text' && mf.$perform(['switchMode', 'math']),
            onContentDidChange: mf => {
			    // console.log(mf.$text());
                // console.log(mf.$text('ASCIIMath'));
				// pass the input to Formulas 
                part.setValue(0, mf.$text('ASCIIMath'));  // the algebraic text
                part.storeExp(1, mf.$text());             // encoded version of the LaTeX string, the encoding is required to fit Formulas format
              
            },
        });
		this.mf.$blur();
		this.setKeyboard = this.setKeyboard.bind(this);
		this.setKeyboard(keyboardRows || [
			['x', 'y', ['\\square^2', '^2'], ['\\square^\\square', '^\\placeholder{}'], 0, '1', '2', '3', '\\div', 0,'_BACKSPACE'],
			[['(', '(\\placeholder{})'], ')', '>', '<', 0, '4', '5', '6', ['\\times', '\\cdot'],0, '_LEFTARROW'],
			['\\lvert \\placeholder{} \\rvert', ',', '\\ge', '\\le', 0, '7', '8 ', '9', '-',0, '_RIGHTARROW'],
			['\\sqrt', '\\pi', '\\ne', '\\frac', 0, '.', '0', '=', '+', 0,'_CLEARALL']
		]);
    }
	
	createVirtualKey(latex) {
      // if given a custom tuple of [LABEL, MATH] - the label is used as is.
      if (Array.isArray(latex))
        return { latex: latex[0], insert: latex[1], class: 'keycap tex' };
      let command = undefined;
      switch (latex.toLowerCase ? latex.toLowerCase() : latex) {
		// gap, narrower than a regular key
		case 0:
		case '_gap':
		  return { class: 'separator w5' };
		// gap, same width as a regular key
		case '_keygap':
		  return { class: 'separator keycap' };
		// left arrow: prev char
		case '_leftarrow':
		  latex = '\\leftarrow';
		  command = ['performWithFeedback', 'moveToPreviousChar'];
		  break;
		// right arrow: next char
		case '_rightarrow':
		  latex = '\\rightarrow';
		  command = ['performWithFeedback', 'moveToNextChar'];
		  break;

		case '_backspace':
		  latex = 'Del';
		  command = ['performWithFeedback', 'deletePreviousChar'];
		  break;
		case '_clearall':
		  latex = 'AC';
		  command = ['performWithFeedback', 'deleteAll'];
		  break;
		}
		
		
		return { latex, command, class: 'keycap tex' };
	}
	setKeyboard(keyRows) {
		this.mf.$setConfig({
			customVirtualKeyboardLayers: {
				'avi-layer': {
					rows: keyRows.map(row => row.map(this.createVirtualKey))
                    }
				}
			})
	};
		

}

let p1 = new formulasPart("part1-{mb}", "algebraic_formula");
let p1kp = new MathInputField('mf1{mb}', p1.getExp(1), p1);
p1.hideAll();

let p2 = new formulasPart("part2-{mb}", "algebraic_formula");
let p2kp = new MathInputField('mf2{mb}', p2.getExp(1), p2);
p2.hideAll();

</script>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text><![CDATA[<p style="direction: ltr;"><br></p>]]></text>
    </generalfeedback>
    <defaultgrade>2</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <correctfeedback format="html">
      <text>תשובתך נכונה.</text>
    </correctfeedback>
    <partiallycorrectfeedback format="html">
      <text>תשובתך נכונה חלקית.</text>
    </partiallycorrectfeedback>
    <incorrectfeedback format="html">
      <text>תשובתך אינה נכונה.</text>
    </incorrectfeedback>
    <shownumcorrect/>
<varsrandom><text>mb={100000:999999};
x={100:200};
y={300:400};</text>
</varsrandom>
<varsglobal><text>ans1=pow(sqrt(2)+1,2);
ans2=x/y;</text>
</varsglobal>
<answernumbering><text>abc</text>
</answernumbering>
<answers>
 <partindex>
  <text>0</text>
 </partindex>
 <placeholder>
  <text>#1</text>
 </placeholder>
 <answermark>
  <text>1</text>
 </answermark>
 <answertype>
  <text>1000</text>
 </answertype>
 <numbox>
  <text>2</text>
 </numbox>
 <vars1>
  <text></text>
 </vars1>
 <answer>
  <text><![CDATA[["ans1","0"]]]></text>
 </answer>
 <vars2>
  <text><![CDATA[cc=diff(["ans1"],[_0]);]]></text>
 </vars2>
 <correctness>
  <text>cc[0] == 0 ? 1 : 0</text>
 </correctness>
 <unitpenalty>
  <text>1</text>
 </unitpenalty>
 <postunit>
  <text></text>
 </postunit>
 <ruleid>
  <text>1</text>
 </ruleid>
 <otherrule>
  <text></text>
 </otherrule>
 <subqtext format="html">
<text><![CDATA[<div id="part1-{mb}" dir="ltr">
    algebric expression {_0}<br> encoded latex {_1} 
</div>]]></text>
 </subqtext>
 <feedback format="html">
<text></text>
 </feedback>
 <correctfeedback format="html">
<text></text>
 </correctfeedback>
 <partiallycorrectfeedback format="html">
<text></text>
 </partiallycorrectfeedback>
 <incorrectfeedback format="html">
<text></text>
 </incorrectfeedback>
</answers>
<answers>
 <partindex>
  <text>1</text>
 </partindex>
 <placeholder>
  <text>#2</text>
 </placeholder>
 <answermark>
  <text>1</text>
 </answermark>
 <answertype>
  <text>1000</text>
 </answertype>
 <numbox>
  <text>2</text>
 </numbox>
 <vars1>
  <text></text>
 </vars1>
 <answer>
  <text><![CDATA[["ans2","0"]]]></text>
 </answer>
 <vars2>
  <text><![CDATA[cc=diff(["ans2"],[_0]);]]></text>
 </vars2>
 <correctness>
  <text>cc[0] == 0 ? 1 : 0</text>
 </correctness>
 <unitpenalty>
  <text>1</text>
 </unitpenalty>
 <postunit>
  <text></text>
 </postunit>
 <ruleid>
  <text>1</text>
 </ruleid>
 <otherrule>
  <text></text>
 </otherrule>
 <subqtext format="html">
<text><![CDATA[<div id="part2-{mb}" dir="ltr">
    algebric expression {_0}<br> encoded latex {_1} 
</div>]]></text>
 </subqtext>
 <feedback format="html">
<text></text>
 </feedback>
 <correctfeedback format="html">
<text></text>
 </correctfeedback>
 <partiallycorrectfeedback format="html">
<text></text>
 </partiallycorrectfeedback>
 <incorrectfeedback format="html">
<text></text>
 </incorrectfeedback>
</answers>
  </question>

</quiz>